CMAKE_MINIMUM_REQUIRED (VERSION 3.9)

SET (CMAKE_CXX_STANDARD 17)

# You can change the project name
PROJECT ("Yunik-GTC")

# You can change the target name
SET (YUNIK_GTC_TARGET yunik-gtc)

# submodules
SET (YUNIK_GTC_SUBMODULES_DIR ${PROJECT_SOURCE_DIR}/submodules)

# OpenGL
FIND_PACKAGE (OpenGL REQUIRED)
INCLUDE_DIRECTORIES (${OPENGL_INCLUDE_DIRS})

# GLFW3
ADD_SUBDIRECTORY (${YUNIK_GTC_SUBMODULES_DIR}/glfw glfw EXCLUDE_FROM_ALL)

# GLEW
SET (GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
SET (GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
SET (GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)

ADD_SUBDIRECTORY (${YUNIK_GTC_SUBMODULES_DIR}/glew/build/cmake glew EXCLUDE_FROM_ALL)
INCLUDE_DIRECTORIES (${YUNIK_GTC_SUBMODULES_DIR}/glew/include)

# GLM
ADD_SUBDIRECTORY (${YUNIK_GTC_SUBMODULES_DIR}/glm glm EXCLUDE_FROM_ALL)

# SoLoud
SET (SOLOUD_BACKEND_SDL2 OFF CACHE BOOL "" FORCE)
IF (WIN32) # For Windows
    SET (SOLOUD_BACKEND_WINMM ON CACHE BOOL "" FORCE)
ELSEIF (APPLE) # For OSX
    SET (SOLOUD_BACKEND_COREAUDIO ON CACHE BOOL "" FORCE)
ELSEIF (UNIX AND NOT APPLE) # For Linux
    SET (SOLOUD_BACKEND_ALSA ON CACHE BOOL "" FORCE)
    SET (SOLOUD_BACKEND_OSS ON CACHE BOOL "" FORCE)
ENDIF ()

ADD_SUBDIRECTORY (${YUNIK_GTC_SUBMODULES_DIR}/soloud/contrib soloud EXCLUDE_FROM_ALL)
INCLUDE_DIRECTORIES (${YUNIK_GTC_SUBMODULES_DIR}/soloud/include)

# tinyobjloader
ADD_SUBDIRECTORY (${YUNIK_GTC_SUBMODULES_DIR}/tinyobjloader tinyobjloader EXCLUDE_FROM_ALL)

# stb
INCLUDE_DIRECTORIES (${YUNIK_GTC_SUBMODULES_DIR}/stb)

# physfs
SET (PHYSFS_ARCHIVE_7Z OFF CACHE BOOL "" FORCE)
SET (PHYSFS_ARCHIVE_GRP OFF CACHE BOOL "" FORCE)
SET (PHYSFS_ARCHIVE_WAD OFF CACHE BOOL "" FORCE)
SET (PHYSFS_ARCHIVE_HOG OFF CACHE BOOL "" FORCE)
SET (PHYSFS_ARCHIVE_MVL OFF CACHE BOOL "" FORCE)
SET (PHYSFS_ARCHIVE_QPAK OFF CACHE BOOL "" FORCE)
SET (PHYSFS_ARCHIVE_SLB OFF CACHE BOOL "" FORCE)
SET (PHYSFS_ARCHIVE_ISO9660 OFF CACHE BOOL "" FORCE)
SET (PHYSFS_ARCHIVE_VDF OFF CACHE BOOL "" FORCE)
SET (PHYSFS_BUILD_SHARED OFF CACHE BOOL "" FORCE)
SET (PHYSFS_BUILD_TEST OFF CACHE BOOL "" FORCE)

ADD_SUBDIRECTORY (${YUNIK_GTC_SUBMODULES_DIR}/physfs physfs EXCLUDE_FROM_ALL)
INCLUDE_DIRECTORIES (${YUNIK_GTC_SUBMODULES_DIR}/physfs/src)

# assimp
SET (BUILD_SHARED_LIBS OFF CACHE BOOL "" FORCE)
SET (ASSIMP_BUILD_TESTS OFF CACHE BOOL "" FORCE)

ADD_SUBDIRECTORY (${YUNIK_GTC_SUBMODULES_DIR}/assimp assimp EXCLUDE_FROM_ALL)
INCLUDE_DIRECTORIES (${YUNIK_GTC_SUBMODULES_DIR}/assimp/include)

# Add source to this project's executable.
FILE (GLOB_RECURSE YUNIK_GTC_CPP_FILES ${PROJECT_SOURCE_DIR}/src/*.cpp)
FILE (GLOB_RECURSE YUNIK_GTC_HPP_FILES ${PROJECT_SOURCE_DIR}/src/*.hpp)

# Resource file for windows
SET (YUNIK_GTC_WIN_RESOURCE_FILE ${PROJECT_SOURCE_DIR}/windows.rc)

ADD_EXECUTABLE (${YUNIK_GTC_TARGET}
    ${YUNIK_GTC_CPP_FILES}
    ${YUNIK_GTC_HPP_FILES}
    ${YUNIK_GTC_WIN_RESOURCE_FILE}
)

TARGET_LINK_LIBRARIES (${YUNIK_GTC_TARGET}
    ${OPENGL_LIBRARIES}
    glfw
    glew_s
    glm
    soloud
    tinyobjloader
    physfs-static
    assimp
)

# Move resources to build file and archive them
SET (YUNIK_GTC_RESOURCES_DIR ${PROJECT_SOURCE_DIR}/resources)
SET (YUNIK_GTC_RESOURCES_RESULT_DIR ${PROJECT_BINARY_DIR}/resources)
FILE (GLOB_RECURSE YUNIK_GTC_RESOURCES "${YUNIK_GTC_RESOURCES_DIR}/*")
SET (_archieved_resources "")
FOREACH (resource ${YUNIK_GTC_RESOURCES})
    IF (resource IN_LIST _archieved_resources)
        CONTINUE ()
    ENDIF ()

    GET_FILENAME_COMPONENT (dir ${resource} DIRECTORY)
    get_filename_component(filename ${resource} NAME)
    STRING (REGEX REPLACE "^${PROJECT_SOURCE_DIR}/" "" dir_relative ${dir})
    STRING (REPLACE "/" "_" _dir_relative ${dir_relative})
    
    FILE (GLOB_RECURSE dir_files "${dir}/*")
    LIST (FILTER dir_files INCLUDE REGEX "^${dir}/([^/]*)$")
    LIST (APPEND _archieved_resources ${dir_files})

    SET (output ${YUNIK_GTC_RESOURCES_RESULT_DIR}/${_dir_relative}.yr)

    ADD_CUSTOM_COMMAND (
        OUTPUT ${output}
        COMMENT "Archive to ${output}."
        DEPENDS ${dir_files}
        WORKING_DIRECTORY ${dir}
        COMMAND ${CMAKE_COMMAND} -E tar "cfv" ${output} --format=zip -- ${dir_files}
    )
    ADD_CUSTOM_TARGET (${_dir_relative} ALL DEPENDS ${dir_files} ${output} WORKING_DIRECTORY ${dir})
ENDFOREACH ()

# CPack settings
INSTALL (TARGETS ${YUNIK_GTC_TARGET} DESTINATION .)
INSTALL (DIRECTORY ${YUNIK_GTC_RESOURCES_RESULT_DIR}  DESTINATION .)

SET (CPACK_GENERATOR "ZIP")
SET (CPACK_PACKAGE_VERSION "0.1.1")

INCLUDE (CPack)
